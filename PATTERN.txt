Absztrakt exporter osztály, a "Template Method" tervezési minta alapján (MunkavegzesExpAbstractClass.cs)

Mivel minden export ugyanazokból az elemi lépésekbõl épül fel (ellenõrzés, file létrehozás, adatok kiírása, file bezárás), ezért választottam ezt a mintát.
Nekem csak a CSV export a feladatom, de ezzel a mintával könnyedén létrehozható XML, JSON, stb. export formátumok is.
Tehát az absztrakt osztály tartalmazza a vázat (Export metódus), és azokat a metódusokat amiket az egyes konkrét megvalósítások fejtenek ki.
Mivel az adatok formázása (1-1 rekord) biztosan különbözõ minden formátumban így FormatLine az absztrakt.
A GetHeader és GetFooter, kapott egy default, "nincs" megvalósítást. Ennek oka, hogy nem minden formátumban értelmezett, minél kevesebb kódot kelljen írni egy-egy konkrét megvalósításhoz.
A CsvExporter osztály tartalmazza a saját feladatom megvalósítását is.
    public abstract class MunkavegzesExpAbstractClass
    {
        public bool Export(string fileName, List<Munkavegzes> data) { ... }
        public abstract string FormatLine(Munkavegzes m);
        public virtual string GetHeader() { return null; }
        public virtual string GetFooter() { return null; }
	}
    public class CsvExporter : MunkavegzesExpAbstractClass
    {
        override public string FormatLine(Munkavegzes m) { ... }
	}
	

Építõ tervezési minta (MunkavegzesEpito.cs)

Egy-egy ügyfélszolgálatos számos tevékenységet végezhet, melyekhez rögzítenie kell a szükséges adatokat
(esetenként akár fél tucatnyit). Ezen adatok között van átfedés (pl. start/stop idõ) de számos eltérés is,
amikor csak egy-egy speciális plusz adatot kell megadni (pl. iktatott dokumentumok száma). A rögzített
adatok adatbázis reprezentációja viszont, a könnyebb kezelhetõség (és az egyen CSV export miatt),
kiterítve minden lehetséges adatmezõt felsorol; természetesen mindig csak azok lesznek kitöltve, amelyek
az adott tevékenységnél értelmezettek.
Ezen probléma (mármint az „elburjánzó” konstruktor paraméterek) kiküszöbölésére alkalmaztam az Építõ (Builder) tervezési mintát.
Az Építõ minta definíciója:
„A probléma lényege, hogy a paraméterek számának növekedésével újabb és újabb konstruktorokat
implementálunk, egyre hosszabb paraméterlistával, a kombinációk sokfélesége okán akár exponenciális
növekedésrõl is beszélhetünk. Az építõ minta Építõ osztálya minden paramétert külön-külön kap meg, és
így elemenként építi fel a Terméket.”
Az az elképzelésem, hogy készítek egy minden elképzelhetõ adatot tartalmazó Munkavegzes osztályt
konstruktor nélkül. A toString() metódust úgy írom meg, hogy CSV formátumot adjon vissza, így egyszerû
lesz az export elkészítése és jól használható unit tesztekhez is.
Készítek egy MunkavegzesEpito osztályt. Ezen utóbbinak lesz egy Create metódusa (a kötelezõen
kitöltendõ Munkavégzés mezõkkel) és minden egyéb (opcionális) munkavégzés tulajdonsághoz pedig egyegy beállító metódusa. A builder-t „fluent API” stílusban készítem, így egyszerûbb és olvashatóbb lesz a
kód.
Tehát egy új Munkavégzés objektum létrehozása (egyszerû esetben) így néz ki:
Munkavegzes t = new MunkavegzesEpito()
.Create(kod, startIdo, stopIdo)
.build();
Opcionális paraméterek esetén pedig így:
Munkavegzes t = new MunkavegzesEpito()
.Create(kod, startIdo, stopIdo)
.Ugyfelazo(ugyfel)
.build();
Munkavegzes t2 = new MunkavegzesEpito()
.Create(kod, startIdo, stopIdo)
.Iktatoszam(iksz)
.Lapszam(9)
.build();