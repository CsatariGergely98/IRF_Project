Egy-egy ügyfélszolgálatos számos tevékenységet végezhet, melyekhez rögzítenie kell a szükséges adatokat
(esetenként akár fél tucatnyit). Ezen adatok között van átfedés (pl. start/stop idõ) de számos eltérés is,
amikor csak egy-egy speciális plusz adatot kell megadni (pl. iktatott dokumentumok száma). A rögzített
adatok adatbázis reprezentációja viszont, a könnyebb kezelhetõség (és az egyen CSV export miatt),
kiterítve minden lehetséges adatmezõt felsorol; természetesen mindig csak azok lesznek kitöltve, amelyek
az adott tevékenységnél értelmezettek.
Úgy gondolom, hogy ezen probléma (mármint az „elburjánzó” konstruktor paraméterek) kiküszöbölésére
jól tudnám alkalmazni az Építõ (Builder) tervezési mintát.
Az Építõ minta definíciója:
„A probléma lényege, hogy a paraméterek számának növekedésével újabb és újabb konstruktorokat
implementálunk, egyre hosszabb paraméterlistával, a kombinációk sokfélesége okán akár exponenciális
növekedésrõl is beszélhetünk. Az építõ minta Építõ osztálya minden paramétert külön-külön kap meg, és
így elemenként építi fel a Terméket.”
Az az elképzelésem, hogy készítek egy minden elképzelhetõ adatot tartalmazó Tevekenyseg osztályt
konstruktor nélkül. A toString() metódust úgy írom meg, hogy CSV formátumot adjon vissza, így egyszerû
lesz az export elkészítése és jól használható unit tesztekhez is.
Készítek egy TevekenysegEpito osztályt. Ezen utóbbinak lesz egy Create metódusa (a kötelezõen
kitöltendõ Tevékenység mezõkkel) és minden egyéb (opcionális) tevékenység tulajdonsághoz pedig egyegy beállító metódusa. A builder-t „fluent API” stílusban készítem, így egyszerûbb és olvashatóbb lesz a
kód.
Tehát egy új tevékenység objektum létrehozása (egyszerû esetben) így fog kinézni:
Tevekenyseg t = new TevekenysegEpito()
.Create(kod, startIdo, stopIdo)
.build();
Opcionális paraméterek esetén pedig így:
Tevekenyseg t = new TevekenysegEpito()
.Create(kod, startIdo, stopIdo)
.Ugyfelazo(ugyfel)
.build();
Tevekenyseg t2 = new TevekenysegEpito()
.Create(kod, startIdo, stopIdo)
.Iktatoszam(iksz)
.Lapszam(9)
.build();